apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: email-provider-kafka
  name: email-provider-kafka
spec:
  serviceName: email-provider-kafka-service
  replicas: 1
  selector:
    matchLabels:
      app: email-provider-kafka
  template:
    metadata:
      labels:
        app: email-provider-kafka
    spec:
      containers:
        - env:
            - name: KAFKA_ENABLE_KRAFT
              value: "yes"
            - name: KAFKA_NODE_ID
              value: "1"
            - name: KAFKA_PROCESS_ROLES
              value: "broker,controller"
            - name: KAFKA_LISTENERS
              value: "INTERNAL://:29092,EXTERNAL://:9092,CONTROLLER://:9093"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://email-provider-kafka-0.email-provider-kafka-service.default.svc.cluster.local:29092,EXTERNAL://email-provider-kafka-0.email-provider-kafka-service.default.svc.cluster.local:9092"
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: CONTROLLER
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: INTERNAL
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: "1@email-provider-kafka-0.email-provider-kafka-service.default.svc.cluster.local:9093"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
          image: apache/kafka:3.9.1
          name: email-provider-kafka
          ports:
            - containerPort: 9092
              protocol: TCP
            - containerPort: 29092
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/kafka
              name: kafka-data
      restartPolicy: Always
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-data
